/// <reference types="node" />
/// <reference types="chrome" />
import EventEmitter from 'events';
import { Deferred } from '@trezor/utils/lib/createDeferred';
import { CoreEventMessage, IFrameLoaded } from '@trezor/connect/lib/events';
import type { ConnectSettings } from '@trezor/connect/lib/types';
export declare class PopupManager extends EventEmitter {
    popupWindow: any;
    settings: ConnectSettings;
    origin: string;
    locked: boolean;
    requestTimeout: number;
    openTimeout: ReturnType<typeof setTimeout> | undefined;
    closeInterval: number;
    iframeHandshake: Deferred<IFrameLoaded['payload']>;
    popupPromise: Deferred<void> | undefined;
    extensionPort: chrome.runtime.Port | undefined;
    extensionTabId: number;
    constructor(settings: ConnectSettings);
    request(): void;
    unlock(): void;
    open(): void;
    openWrapper(url: string): void;
    handleExtensionConnect(port: chrome.runtime.Port): void;
    handleExtensionMessage(message: MessageEvent): void;
    handleMessage(message: MessageEvent): void;
    clear(focus?: boolean): void;
    close(): void;
    postMessage(message: CoreEventMessage): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map