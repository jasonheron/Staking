"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinary = void 0;
const tslib_1 = require("tslib");
const versionUtils = tslib_1.__importStar(require("@trezor/utils/lib/versionUtils"));
const assets_1 = require("../../utils/assets");
const firmwareUtils_1 = require("../../utils/firmwareUtils");
const firmwareInfo_1 = require("../../data/firmwareInfo");
const getBinary = ({ features, releases, baseUrl, version, btcOnly, intermediaryVersion, }) => {
    if (!(0, firmwareUtils_1.isStrictFeatures)(features)) {
        throw new Error('Features of unexpected shape provided');
    }
    if (intermediaryVersion) {
        return (0, assets_1.httpRequest)(`${baseUrl}/firmware/t1b1/trezor-t1b1-inter-v${intermediaryVersion}.bin`, 'binary');
    }
    const infoByBootloader = (0, firmwareInfo_1.getInfo)({ features, releases });
    const releaseByFirmware = releases.find(r => version &&
        versionUtils.isVersionArray(version) &&
        versionUtils.isEqual(r.version, version));
    if (!infoByBootloader || !releaseByFirmware) {
        throw new Error('no firmware found for this device');
    }
    if (btcOnly && !releaseByFirmware.url_bitcoinonly) {
        throw new Error(`firmware version ${version} does not exist in btc only variant`);
    }
    if (!versionUtils.isEqual(releaseByFirmware.version, infoByBootloader.release.version)) {
        throw new Error('version provided as param does not match firmware version found by features in bootloader');
    }
    const fwUrl = releaseByFirmware[btcOnly ? 'url_bitcoinonly' : 'url'];
    return (0, assets_1.httpRequest)(`${baseUrl}/${fwUrl}`, 'binary');
};
exports.getBinary = getBinary;
//# sourceMappingURL=getBinary.js.map